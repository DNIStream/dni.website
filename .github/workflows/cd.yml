name: DNI Stream Website CD Build

on:
  push:
    # The "branches" node is just for testing
    # branches:
    #   - release/*
    # Devs must "tag and push" to release a new version
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

env:
  # IMAGE_TAG: 2.0.3 # For testing puyrposes only. Dealt with in the "Get image tags" task.
  DOCKER_REGISTRY: docker.pkg.github.com
  API_IMAGE: docker.pkg.github.com/dnistream/dni.website/dniapi # Cannot use variable references here - hence repeat info
  WEB_IMAGE: docker.pkg.github.com/dnistream/dni.website/dniweb

  # docker-compose.yml file required environment variables for both build and deploy
  BUILD_ENVIRONMENT: prod
  ASPNET_CONFIGURATION: Release
  LOCAL_WEB_PORT: 8080
  LOCAL_API_PORT: 8181
  IMAGE_PREFIX: docker.pkg.github.com/dnistream/dni.website/
  LOG_MOUNT_PATH: ${{ secrets.LOG_MOUNT_PATH }}

jobs:
  buildDockerImages:
    name: Build & Publish Docker Images Using Registry Cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log in to docker packages
        run: docker login ${DOCKER_REGISTRY} --username dnistream --password ${{ secrets.GITHUB_TOKEN }}
      - name: Set version from git tag
        run: echo ::set-env name=IMAGE_TAG::${GITHUB_REF/refs\/tags\//}
      - name: Check image version does not exist
        continue-on-error: false
        shell: bash {0}
        run: |
          docker pull ${API_IMAGE}:${IMAGE_TAG} 2>&1;
          if [ "$?" = "0" ] ; then { echo ${API_IMAGE}:${IMAGE_TAG} already exists in registry; exit 1; }; else exit 0; fi
      - name: Check VERSION file is up to date
        continue-on-error: false
        shell: bash {0}
        run: if [ "$(head -n 1 "VERSION")" != "$IMAGE_TAG" ]; then echo VERSION file mismatches tag. Run version.ps1 to update artifact versions; exit 1; fi
      - name: Pull latest images for cache
        continue-on-error: true
        run: |
          set -x;
          docker pull ${API_IMAGE}:latest-restore || true;
          docker pull ${API_IMAGE}:latest-build || true;
          docker pull ${API_IMAGE}:latest || true;
          docker pull ${WEB_IMAGE}:latest-restore || true;
          docker pull ${WEB_IMAGE}:latest-build || true;
          docker pull ${WEB_IMAGE}:latest || true;
          docker image ls;
      - name: Build docker images
        run: |
          set -x;
          docker-compose build --compress;
          # docker image ls;
      - name: Tag images
        run: |
          set -x;
          docker tag ${API_IMAGE}:latest ${API_IMAGE}:${IMAGE_TAG};
          docker tag ${WEB_IMAGE}:latest ${WEB_IMAGE}:${IMAGE_TAG};
          # docker image ls;
      - name: Push images
        run: |
          set -x;
          docker push ${API_IMAGE}:latest-restore;
          docker push ${API_IMAGE}:latest-build;
          docker push ${API_IMAGE}:latest;
          docker push ${WEB_IMAGE}:latest-restore;
          docker push ${WEB_IMAGE}:latest-build;
          docker push ${WEB_IMAGE}:latest;
          docker push ${API_IMAGE}:${IMAGE_TAG};
          docker push ${WEB_IMAGE}:${IMAGE_TAG};
      - name: Docker logout
        run: docker logout ${DOCKER_REGISTRY}
