name: DNI Stream Website CD Build

on:
  push:
    branches: [ release/* ]
  pull_request:
    branches: [ master ]
    

env:
  IMAGE_TAG: 2.0.3 # Remove for go live - dealt with in the "Get image tags" task
  DOCKER_REGISTRY: docker.pkg.github.com
  API_IMAGE: docker.pkg.github.com/dnistream/dni.website/dniapi # Cannot use variable references here - hence repeat info
  WEB_IMAGE: docker.pkg.github.com/dnistream/dni.website/dniweb

  # docker-compose.yml file required environment variables for both build and deploy
  BUILD_ENVIRONMENT: prod
  ASPNET_CONFIGURATION: Release
  LOCAL_WEB_PORT: 8080
  LOCAL_API_PORT: 8181
  IMAGE_PREFIX: docker.pkg.github.com/dnistream/dni.website/
  LOG_MOUNT_PATH: ${{ secrets.LOG_MOUNT_PATH }}

jobs:
  buildDockerImages:
    name: Build & Publish Docker Images Using Registry Cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log in to docker packages
        run: docker login ${DOCKER_REGISTRY} --username dnistream --password ${{ secrets.GITHUB_TOKEN }}
      # - name: Get image tags
        # run: echo ::set-env name=IMAGE_TAG::${GITHUB_REF/refs\/tags\//}
      # - name: Check image version does not exists
      #   continue-on-error: false
      #   shell: bash {0}
      #   run: |
      #     docker pull ${API_IMAGE}:${IMAGE_TAG} 2>&1;
      #     if [ "$?" = "0" ] ; then { echo ${API_IMAGE}:${IMAGE_TAG} already exists in registry; exit 1; }; else exit 0; fi
      - name: Pull latest images for cache
        continue-on-error: true
        run: |
          set -x;
          docker pull ${API_IMAGE}:latest-restore || true;
          docker pull ${API_IMAGE}:latest-build || true;
          docker pull ${API_IMAGE}:latest || true;
          docker pull ${WEB_IMAGE}:latest-restore || true;
          docker pull ${WEB_IMAGE}:latest-build || true;
          docker pull ${WEB_IMAGE}:latest || true;
          docker image ls;
      - name: Build docker images
        run: |
          set -x;
          docker-compose build --compress;
          # docker image ls;
      - name: Tag images
        run: |
          set -x;
          docker tag ${API_IMAGE}:latest ${API_IMAGE}:${IMAGE_TAG};
          docker tag ${WEB_IMAGE}:latest ${WEB_IMAGE}:${IMAGE_TAG};
          # docker image ls;
      - name: Push images
        run: |
          set -x;
          docker push ${API_IMAGE}:latest-restore;
          docker push ${API_IMAGE}:latest-build;
          docker push ${API_IMAGE}:latest;
          docker push ${WEB_IMAGE}:latest-restore;
          docker push ${WEB_IMAGE}:latest-build;
          docker push ${WEB_IMAGE}:latest;
          docker push ${API_IMAGE}:${IMAGE_TAG};
          docker push ${WEB_IMAGE}:${IMAGE_TAG};
      - name: Docker logout
        run: docker logout ${DOCKER_REGISTRY}
  deployDockerImages:
    name: Pull & Deploy Docker Images to Production
    runs-on: ubuntu-latest
    needs: [buildDockerImages]
    steps:
      - uses: actions/checkout@v2
      - name: Log in to docker packages
        run: docker login ${DOCKER_REGISTRY} --username dnistream --password ${{ secrets.GITHUB_TOKEN }}
      - name: Pull latest images from registry
        continue-on-error: false
        run: |
          set -x;
          docker pull ${API_IMAGE}:latest-restore || true;
          docker pull ${API_IMAGE}:latest-build || true;
          docker pull ${API_IMAGE}:latest || true;
          docker pull ${WEB_IMAGE}:latest-restore || true;
          docker pull ${WEB_IMAGE}:latest-build || true;
          docker pull ${WEB_IMAGE}:latest || true;
          docker image ls;
      - name: Docker logout
        run: docker logout ${DOCKER_REGISTRY}
      - name: Run new containers
        env:
          ASPNETCORE_ENVIRONMENT: Production
          CAPTCHA_KEY: ${{ secrets.CAPTCHA_KEY }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_ENABLE_SSL: ${{ secrets.SMTP_ENABLE_SSL }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          ERROR_EMAIL_FROM: ${{ secrets.ERROR_EMAIL_FROM }}
          ERROR_EMAIL_TO: ${{ secrets.ERROR_EMAIL_TO }}
          CONTACT_EMAIL_TO: ${{ secrets.CONTACT_EMAIL_TO }}
        run: |
          set -x;
          docker-compose up -d --no-build --force-recreate --scale dni.api.restore=0 --scale dni.api.build=0 --scale dni.web.restore=0 --scale dni.web.build=0;
      - name: Clean up docker
        run: |
          set -x;
          docker image ls -a;
          docker image rm -f ${API_IMAGE}:latest-restore;
          docker image rm -f ${API_IMAGE}:latest-build;
          docker image rm -f ${WEB_IMAGE}:latest-restore;
          docker image rm -f ${WEB_IMAGE}:latest-build;
          docker image ls -a;
      - name: Clean up repo
        run: |
          set -x;
          ls -la;
          pwd;
          rm -rf *;
